#include <FastLED.h>

#define LED_PIN     6
#define NUM_LEDS    192
#define BRIGHTNESS  5
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];

#define UPDATES_PER_SECOND 100

#define matrixW = 24
#define matrixH = 8


CRGBPalette16 currentPalette;
TBlendType    currentBlending;

extern CRGBPalette16 myRedWhiteBluePalette;
extern const TProgmemPalette16 myRedWhiteBluePalette_p PROGMEM;


void setup() {
  Serial.begin(115200);

  delay( 3000 ); // power-up safety delay
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  FastLED.setBrightness(  BRIGHTNESS );


  currentPalette = RainbowColors_p;
  currentBlending = LINEARBLEND;
}


int StrToHex(char c1, char c2)
{
  char in[2] = {c1, c2};
  return StrToHex(in);
}

int StrToHex(char str[])
{
  return (int) strtol(str, 0, 16);
}

void setLedRGB(int led, char* color) {
  int red = StrToHex(color[2], color[3]);
  Serial.print("red : ");
  Serial.println(red);
  leds[led].red = red;

  int green = StrToHex(color[4], color[5]);
  Serial.print("green : ");
  Serial.println(green);
  leds[led].green = green;

  int blue = StrToHex(color[6], color[7]);
  Serial.print("blue : ");
  Serial.println(blue);
  leds[led].blue = blue;
}

CRGB getRGB(char* color) {
  return NULL;
}

char*  mouth[192] = {
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0x000000", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0x000000", "0x000000", "0x000000", "0x000000", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f",
  "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f"
};

char*  rec[192] = {
  "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xbf309f", "0xffcc00",
  "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00", "0xffcc00"
};

char* test[64] = {
  "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00",
  "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8",
  "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8",
  "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8",
  "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8",
  "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8",
  "0xcd04f8", "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00", "0xcd04f8",
  "0xffcc00", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xcd04f8", "0xffcc00"
};


void feed3Screen(char* pics) {

}

void loop()
{

  int led = 0;
  for ( int i = 0; i < 192; i++) {
    if (i == 0 || i == 24 || i == 48 || i == 72 || i == 96 || i == 120  || i == 144 || i == 168) {
      led = i;
    } else if (i == 8 || i == 32 || i == 56 || i == 80 || i == 104 || i == 128  || i == 152 || i == 176) {
      i = i+ 64;
    } else if (i == 16 || i == 40 || i == 64 || i == 88 || i == 112 || i == 136  || i == 160 || i == 184) {
      led = i+ 64;;
    } else {
      led++;
    }

    Serial.println(led);

    leds[led].red = StrToHex(rec[i][2], rec[i][3]);
    leds[led].green = StrToHex(rec[i][4], rec[i][5]);
    leds[led].blue = StrToHex(rec[i][6], rec[i][7]);
  }

  /*for ( int i = 64; i < 128; i++) {


    leds[i].red = StrToHex(test[i][2], rec[i][3]);
    leds[i].green = StrToHex(test[i][4], rec[i][5]);
    leds[i].blue = StrToHex(test[i][6], rec[i][7]);
    }*/

  FastLED.show();
  //FastLED.delay(1000 / UPDATES_PER_SECOND);

  delay(1000);
}
